%YAML 1.2
---
name: Concurnas
scope: source.conc
file_extensions: [ conc ]

contexts:
  main:
    - include: comments
    - include: multi_line_comment
    - include: strings
    - match: \b(void|int|long|short|float|double|boolean|bool|byte|char|lambda|size_t)\b
      captures:
        0: entity.name.type.concurnass
    - match: \b(import|from|assert|as|is|new|isnot)\b
      captures:
        0: keyword.control.concurnas
    - match: \b(private|public|package|protected)\b
      captures:
        0: storage.modifier.concurnas
    - match: \b(true|false|null|this|super)\b
      captures:
        0: constant.language.concurnas
    - match: \b(fun|def|gpudef|gpukernel|init|annotation|class|trait|enum|await|transient|extends|implements)\b
      captures:
        0: entity.name.concurnas
    - match: \b(global|local|constant|val|var|typedef|abstract|override)\b
      captures:
        0: storage.modifier.concurnas
    - match: \b(\.\.|\.|in|out|del|default|sizeof|trans|while|for|using|match|with|if|elif|else|throw|try|catch|finally|onchange|every|async|pre|post|loop|also|open|closed|sync|parfor|parforsync|return|break|continue|actor|in|of|changed|match|case)\b
      captures:
        0: keyword.control.concurnas
    - match: '(&|@|==|&==|<>|&<>|>||<|==>|==<|:|<=|<-|->|\.\.\.)'
      captures:
        0: keyword.operator.concurnas
    - match: \b(comp|mod|or|and|not|band|bor|bxor)\b
      captures:
        0: keyword.operator.concurnas
    - match: \b(inject|provider|provide|single|shared)\b
      captures:
        0: keyword.control.concurnas
    - match: \b(nodefault|unchecked)\b
      captures:
        0: keyword.control.concurnas
    - match: '(\^|\+|-|~|\*|/|>>|<<|>>>|\*\*|!|<|>)'
      captures:
        0: keyword.operator.concurnas
    - match: '(=>|\?|\+=|\*=|\*\*=|-=|/=|or=|and=|bxor=|bor=|band=|mod=|>>=|<<=|>>>=)'
      captures:
        0: keyword.operator.concurnas


    - include: floatingPoints
    - include: integers
 
  integers:
    - match: '(\b0(B|b)\d+(l|L|s|S|f|F|d|D)?)'
      captures:
        0: constant.numeric.concurnas
    - match: '(\b0(X|x)([a-f\x{007c}0-9\x{007c}A-F])+(l|L|s|S|f|F|d|D)?)'
      captures:
        0: constant.numeric.concurnas
    - match: '(\b[0-9][0-9]*(l|L|s|S|f|F|d|D)?)'
      captures:
        0: constant.numeric.concurnas

  strings:
    - match: '(r?")'
      captures:
        0: string.quoted.concurnas
      push:           
        - match: '(")'
          pop: true
          captures:
            0: string.quoted.concurnas
        - match: '(\\(?:\\|"))'
          captures:
            0: string.quoted.concurnas
        - match: '([^\x{0022}\x{005c}]+)'
          captures:
            0: string.quoted.concurnas

        - match: '(.)'
          captures:
            0: text.concurnas


    - match: '(r?'')'
      captures:
        0: string.quoted.concurnas
      push: 
        - match: '('')'
          pop: true
          captures:
            0: string.quoted.concurnas
        - match: '(\\(?:\\|''))'
          captures:
            0: string.quoted.concurnas
        - match: '([^\x{0027}\x{005c}]+)'
          captures:
            0: string.quoted.concurnas
        - match: '(.)'
          captures:
            0: text.concurnas

    - match: '(\|\|)'
      captures:
        0: string.regexp.concurnas
      push: 
        - match: '(\|\|)'
          pop: true
          captures:
            0: string.regexp.concurnas
        - match: '(\\(?:\\|(\|\|)))'
          captures:
            0: string.regexp.concurnas
        - match: '([^\x{0028}\|\|\x{0029}\x{005c}]+)'
          captures:
            0: string.regexp.concurnas
        - match: '(.)'
          captures:
            0: text.concurnas

  floatingPoints:
    - match: '(([1-9][0-9]*|0[0-9]*)?\.[0-9]+((e|E)(\+|-)?[0-9]+)?(f|F|d|D)?)'
      captures:
        0: constant.numeric.concurnas
    - match: '(([0-9][1-9]*)?((e|E)(\+|-)?[0-9]+)(f|F|d|D)?)'
      captures:
        0: constant.numeric.concurnas

  comments:
    - match: '(//.*)'
      captures:
        0: comment.concurnas
  multi_line_comment:
    - match: '(/\*)'
      captures:
        0: comment.concurnas
      push: 
        - match: '(\*/)'
          pop: true
          captures:
            0: comment.concurnas
        - include: multi_line_comment
        - match: '(.)'
          captures:
            0: comment.concurnas

